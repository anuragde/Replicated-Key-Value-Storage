Index: app/src/main/java/edu/buffalo/cse/cse486586/simpledynamo/SimpleDynamoProvider.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/edu/buffalo/cse/cse486586/simpledynamo/SimpleDynamoProvider.java	(date 1533144614000)
+++ app/src/main/java/edu/buffalo/cse/cse486586/simpledynamo/SimpleDynamoProvider.java	(date 1533144614000)
@@ -19,9 +19,12 @@
 import java.security.NoSuchAlgorithmException;
 import java.util.ArrayList;
 import java.util.Formatter;
+import java.util.LinkedList;
+import java.util.Queue;
 import java.util.TreeMap;
 import java.util.concurrent.BlockingQueue;
 import java.util.concurrent.LinkedBlockingDeque;
+import java.util.concurrent.locks.ReentrantLock;
 
 import android.content.ContentProvider;
 import android.content.ContentValues;
@@ -60,6 +63,15 @@
 
 	public static String portNo="";
 	static Node myNode;
+	static File missed_files_dir_0 ;
+	static String path_0;
+	static File directory_0;
+	static File missed_files_dir_1;
+	static String path_1;
+	static File directory_1;
+	static File missed_files_dir_2 ;
+	static String path_2;
+	static File directory_2;
 
 	public static TreeMap<String,Node> tv = new TreeMap<String,Node>();
 	public static ArrayList<Node> nodeList= new ArrayList<Node>();
@@ -165,31 +177,7 @@
 		}
 		return 0;
 	}
-	public void respondQuery1(String filename) {
-		String line = "";
-		try {
-			Log.v("File input stream", filename);
-			FileInputStream in = context.openFileInput(filename);
-			/*  Log.e(TAG, "File inputStreamReader.");*/
-			InputStreamReader inputStreamReader = new InputStreamReader(in);
-			BufferedReader bufferedReader = new BufferedReader(inputStreamReader);
-			StringBuilder sb = new StringBuilder();
-			line = bufferedReader.readLine();
-			sb.append(line);
-			line = sb.toString();
-			in.close();
-			String[] result = {"Hi",filename,line};
-			reqQue.put(result);
-		} catch (Exception e) {
-			e.printStackTrace();
-			Log.e(TAG, "File read failed...");
-			new ClientTask().executeOnExecutor(AsyncTask.SERIAL_EXECUTOR);
-			respondQuery1(filename);
 
-		}
-		return;
-
-	}
 	public void respondQuery(String reqNode,String filename) {
 		String line="";
 		try {
@@ -205,11 +193,8 @@
 			in.close();
 
 		} catch (Exception e) {
-			e.printStackTrace();
 			Log.e(TAG, "File read failed...");
-			getResponsibleNode1(reqNode,myNode.pred,filename);
-			return;
-
+			e.printStackTrace();
 		}
 
 		try {
@@ -232,7 +217,7 @@
 			Log.e("ClientTask","sendToResponsibleNode Error");
 		}
 
-return;
+
 	}
 
 
@@ -276,7 +261,7 @@
 			}
 		}
 		catch (Exception e){
-
+e.printStackTrace();
 		}
 
 	}
@@ -297,7 +282,7 @@
 		Log.v("Created " + hashedKey, "with value " + string + "Before hash " + filename);
 		FileOutputStream outputStream;
 		try {//Context.MODE_PRIVATE
-			String sendReq ="aDel+insertReplica+aDel"+filename+"aDel"+string+"aDel"+myNode.node_id;
+			String sendReq ="aDel+insertReplica+aDel"+filename+"aDel"+string+"aDel"+myNode.node_id+"aDel"+"0";
 			sendReplica(filename,string,myNode.succ,sendReq);
 			sendReplica(filename,string,myNode.succ.succ,sendReq);
 			System.out.println(filename);
@@ -343,147 +328,536 @@
 }
 catch (Exception e1){
 e1.printStackTrace();
+String result[] = new String[2];
+result[0] = key;
+result[1] = value;
+reqQue2.add(result);
+
 }
+
+
 		}
 	}
+	//private final Object lock_0 = new Object();
+	//private final Object lock_1 = new Object();
+	ReentrantLock lock_0 = new ReentrantLock();
+	ReentrantLock lock_1 = new ReentrantLock();
+	ReentrantLock lock_2 = new ReentrantLock();
+	Queue<String[]> reqQue2 = new LinkedList<String[]>();
+
+
+
 
 	synchronized public void insertMissedData(String key,String value,String missed_node_id) {
-		// TODO Auto-generated method stub
-		Log.v("insertMissedData", missed_node_id);
+		Log.v("insertMissedData","Entry");
+		Log.v("insertMissedData",missed_node_id);
+		Log.v("insertMissedData",myNode.succ.node_id);
+		Log.v("insertMissedData",myNode.succ.succ.node_id);
+		Log.v("insertMissedData",myNode.pred.node_id);
 		Context context = SimpleDynamoActivity.getAppContext();
-		File missed_files_dir1 = new File("app_"+missed_node_id);
-		String path = "";
-		if(missed_files_dir1.isDirectory() && missed_files_dir1.exists()){
-			 path = missed_files_dir1.getPath();
+
+		//File missed_files_dir_0 = context.getDir(myNode.succ.node_id, Context.MODE_PRIVATE);
+		String path_0 = getPath0();
+		String path_1 = getPath1();
+		String path_2 = getPath2();
+		File directory_0 = getDir0();
+		File directory_1 = getDir1();
+		File directory_2 = getDir2();
+
+		/*File missed_files_dir_1 = context.getDir(myNode.succ.succ.node_id, Context.MODE_PRIVATE);*/
+
+
 
-		}else {
-			File missed_files_dir = context.getDir(missed_node_id, Context.MODE_PRIVATE);
-			 path = missed_files_dir.getPath();
-		}
-		Log.v("insertMissedData",path);
-		Log.v("insert", value);
-		String filename = key;
-		String string = value;
-		String hashedKey="";
-		Log.v("Created " + hashedKey, "with value " + string + "Before hash " + filename);
-		FileOutputStream outputStream;
-		try {//Context.MODE_PRIVATE
-			System.out.println(filename);
-			System.out.println(context);
-			outputStream = new FileOutputStream(new File(path+"/"+filename));
-			outputStream.write(string.getBytes());
-			outputStream.flush();
-			outputStream.close();
+
+		if (missed_node_id.equals(myNode.succ.node_id)) {
+				Log.v("insertMissedData","Waiting for lock 0");
+
+				//lock_0.lock();
+			try {
+				Log.v("insertMissedData","inside lock 0");
+				// TODO Auto-generated method stub
+				Log.v("insertMissedData", missed_node_id);
+				Log.v("insertMissedData", path_0);
+				Log.v("insert", value);
+				String filename = key;
+				String string = value;
+				String hashedKey = "";
+				Log.v("Created " + hashedKey, "with value " + string + "Before hash " + filename);
+				FileOutputStream outputStream;
+				try {//Context.MODE_PRIVATE
+					System.out.println(filename);
+					System.out.println(context);
+					outputStream = new FileOutputStream(new File(path_0 + "/" + filename));
+					outputStream.write(string.getBytes());
+					outputStream.flush();
+					outputStream.close();
 
-		} catch (Exception e) {
-			e.printStackTrace();
-			Log.e(TAG, "File write failed");
-		}
+				} catch (Exception e) {
+					e.printStackTrace();
+					Log.e(TAG, "File write failed");
+				}
 
-		File directory = new File(path);
-		Log.v("File input stream", missed_node_id);
-		Log.v("File input stream", path);
+				Log.v("File input stream", missed_node_id);
+				Log.v("File input stream", path_0);
 
-		Log.v("File input stream", "sendMissedData");
-		String[] fileList = directory.list();
-		Log.v("File input stream", Integer.toString(fileList.length));
-		Log.v("sendMissedData", fileList.toString());
+				Log.v("File input stream", "sendMissedData");
+				String[] fileList = directory_0.list();
+				Log.v("File input stream", Integer.toString(fileList.length));
+				Log.v("sendMissedData", fileList.toString());
 
 
-		try {
+				try {
 
-			for (int i = 0; i < fileList.length; i++) {
+					for (int i = 0; i < fileList.length; i++) {
 
-				try {
-					filename = fileList[i];
-					Log.v("File input stream", path+"/"+filename);
+						try {
+							filename = fileList[i];
+							Log.v("File input stream", path_0 + "/" + filename);
 
-					FileInputStream inputStream = new FileInputStream(new File(path+"/"+filename));
-					//FileInputStream in = context.openFileInput(path+"/"+filename);
-					/*  Log.e(TAG, "File inputStreamReader.");*/
-					InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
-					BufferedReader bufferedReader = new BufferedReader(inputStreamReader);
-					StringBuilder sb = new StringBuilder();
-					String line = bufferedReader.readLine();
-					sb.append(line);
-					inputStream.close();
-					line = sb.toString();
-					Log.v(filename,line);
-				} catch (Exception e) {
-					Log.e(TAG, "File read failed...");
+							FileInputStream inputStream = new FileInputStream(new File(path_0 + "/" + filename));
+							//FileInputStream in = context.openFileInput(path+"/"+filename);
+							/*  Log.e(TAG, "File inputStreamReader.");*/
+							InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
+							BufferedReader bufferedReader = new BufferedReader(inputStreamReader);
+							StringBuilder sb = new StringBuilder();
+							String line = bufferedReader.readLine();
+							sb.append(line);
+							line = sb.toString();
+							inputStream.close();
+							bufferedReader.close();
+							inputStreamReader.close();
+							Log.v(filename, line);
+						} catch (Exception e) {
+							Log.e(TAG, "File read failed...");
+							e.printStackTrace();
+						}
+
+
+					}
+
+				} catch (Exception e) {
+e.printStackTrace();
+				}
+			}
+			finally {
+				//lock_0.unlock();
+			}
+				Log.v("insertMissedData","Exit");
+
+			}
+		else if (missed_node_id.equals(myNode.succ.succ.node_id)) {
+				//lock_1.lock();
+				Log.v("insertMissedData","Waiting for lock1");
+
+				try {
+					Log.v("insertMissedData","inside lock1");
+
+					// TODO Auto-generated method stub
+					Log.v("insertMissedData", missed_node_id);
+					Log.v("insertMissedData", path_1);
+					Log.v("insert", value);
+					String filename = key;
+					String string = value;
+					String hashedKey = "";
+					Log.v("Created " + hashedKey, "with value " + string + "Before hash " + filename);
+					FileOutputStream outputStream;
+					try {//Context.MODE_PRIVATE
+						System.out.println(filename);
+						System.out.println(context);
+						outputStream = new FileOutputStream(new File(path_1 + "/" + filename));
+						outputStream.write(string.getBytes());
+						outputStream.flush();
+						outputStream.close();
+
+					} catch (Exception e) {
+						e.printStackTrace();
+						Log.e(TAG, "File write failed");
+					}
+
+					Log.v("File input stream", missed_node_id);
+					Log.v("File input stream", path_1);
+
+					Log.v("File input stream", "sendMissedData");
+					String[] fileList = directory_1.list();
+					Log.v("File input stream", Integer.toString(fileList.length));
+					Log.v("sendMissedData", fileList.toString());
+
+
+					try {
+
+						for (int i = 0; i < fileList.length; i++) {
+
+							try {
+								filename = fileList[i];
+								Log.v("File input stream", path_1 + "/" + filename);
+
+								FileInputStream inputStream = new FileInputStream(new File(path_1 + "/" + filename));
+								//FileInputStream in = context.openFileInput(path+"/"+filename);
+								/*  Log.e(TAG, "File inputStreamReader.");*/
+								InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
+								BufferedReader bufferedReader = new BufferedReader(inputStreamReader);
+								StringBuilder sb = new StringBuilder();
+								String line = bufferedReader.readLine();
+								sb.append(line);
+								line = sb.toString();
+								inputStream.close();
+								bufferedReader.close();
+								inputStreamReader.close();
+								Log.v(filename, line);
+							} catch (Exception e) {
+								Log.e(TAG, "File read failed...");
+								e.printStackTrace();
+							}
+
+
+						}
+
+					} catch (Exception e) {
+e.printStackTrace();
+					}
+
+				}finally {
+					//lock_1.unlock();
+				}
+}
+
+
+		else if (myNode.pred.node_id.equals(missed_node_id)) {
+			Log.v("insertMissedData", missed_node_id);
+			Log.v("insertMissedData", myNode.pred.node_id);
+			Log.v("insertMissedData","Waiting for lock2");
+
+			try {
+				Log.v("insertMissedData","inside lock2");
+
+				// TODO Auto-generated method stub
+				Log.v("insertMissedData", missed_node_id);
+				Log.v("insertMissedData", path_2);
+				Log.v("insert", value);
+				String filename = key;
+				String string = value;
+				String hashedKey = "";
+				Log.v("Created " + hashedKey, "with value " + string + "Before hash " + filename);
+				FileOutputStream outputStream;
+				try {//Context.MODE_PRIVATE
+					System.out.println(filename);
+					System.out.println(context);
+					outputStream = new FileOutputStream(new File(path_2 + "/" + filename));
+					outputStream.write(string.getBytes());
+					outputStream.flush();
+					outputStream.close();
+
+				} catch (Exception e) {
 					e.printStackTrace();
+					Log.e(TAG, "File write failed");
 				}
 
+				Log.v("File input stream", missed_node_id);
+				Log.v("File input stream", path_2);
+
+				Log.v("File input stream", "sendMissedData");
+				String[] fileList = directory_2.list();
+				Log.v("File input stream", Integer.toString(fileList.length));
+				Log.v("sendMissedData", fileList.toString());
+
+
+				try {
+
+					for (int i = 0; i < fileList.length; i++) {
 
-			}
-		}
-		catch (Exception e){
+						try {
+							filename = fileList[i];
+							Log.v("File input stream", path_2 + "/" + filename);
+
+							FileInputStream inputStream = new FileInputStream(new File(path_2 + "/" + filename));
+							//FileInputStream in = context.openFileInput(path+"/"+filename);
+							/*  Log.e(TAG, "File inputStreamReader.");*/
+							InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
+							BufferedReader bufferedReader = new BufferedReader(inputStreamReader);
+							StringBuilder sb = new StringBuilder();
+							String line = bufferedReader.readLine();
+							sb.append(line);
+							line = sb.toString();
+							inputStream.close();
+							bufferedReader.close();
+							inputStreamReader.close();
+							Log.v(filename, line);
+						} catch (Exception e) {
+							Log.e(TAG, "File read failed...");
+							e.printStackTrace();
+						}
+
+
+					}
 
-		}
+				} catch (Exception e) {
+					e.printStackTrace();
+				}
 
+			}finally {
+			}
+			Log.v("insertMissedData","Exit");
+
+		}
+		return;
+	}
+
+
+	synchronized public void insertReplica1(String key,String value,String missed_node,String flag) {
+		// TODO Auto-generated method stub
+		String filename = key;
+		String string = value;
+		String hashedKey="";
+		Context context = SimpleDynamoActivity.getAppContext();
+		Log.v("Created " + hashedKey, "with value " + string + "Before hash " + filename);
+		FileOutputStream outputStream;
+		try {//Context.MODE_PRIVATE
+			Log.v("insertReplica", value);
+			System.out.println(filename);
+			System.out.println(context);
+			context.deleteFile(filename);
+			outputStream = context.openFileOutput(filename, Context.MODE_PRIVATE);
+			outputStream.write(string.getBytes());
+			outputStream.flush();
+			outputStream.close();
+
+		} catch (Exception e) {
+			e.printStackTrace();
+			try{
+				Log.v(filename,string);
+				outputStream = context.openFileOutput(filename, Context.MODE_PRIVATE);
+				outputStream.write(string.getBytes());
+				outputStream.flush();
+				outputStream.close();
+			}
+			catch (Exception e1){
+				e1.printStackTrace();
+				String result[] = new String[2];
+				result[0] = key;
+				result[1] = value;
+				reqQue2.add(result);
+
+			}
 
 
+		}
+
+if(flag.equals(Integer.toString(1))) {
+	insertMissedData(key, value, missed_node);
+}
+		return;
 	}
+
 	synchronized public void sendMissedData(String reqNode,DataOutputStream outputStream) {
-		String filename = "";
-		String line = "";
-		Context context = SimpleDynamoActivity.getAppContext();
+		String path_0 = getPath0();
+		String path_1 = getPath1();
+		String path_2 = getPath2();
+
+		File directory_0 = getDir0();
+		File directory_1 = getDir1();
+		File directory_2 = getDir2();
+
+		if(reqNode.equals(myNode.succ.node_id)){
+lock_0.lock();
+			try {
+			String filename = "";
+			String line = "";
 
-		File missed_files_dir = context.getDir(reqNode,Context.MODE_PRIVATE);
-		String path = missed_files_dir.getPath();
-		File directory = new File(path);
-		Log.v("File input stream", reqNode);
-		Log.v("File input stream", path);
+
+			Log.v("File input stream", reqNode);
+			Log.v("File input stream", path_0);
 
-		Log.v("File input stream", "sendMissedData");
-		String[] fileList = directory.list();
-		Log.v("File input stream", Integer.toString(fileList.length));
-		Log.v("sendMissedData", fileList.toString());
+			Log.v("File input stream", "sendMissedData");
+			File[] fileList = directory_0.listFiles();
+			Log.v("File input stream", Integer.toString(fileList.length));
+			Log.v("File input stream", Integer.toString(fileList.length));
+
+			Log.v("File input stream", Integer.toString(fileList.length));
+
+			Log.v("File input stream", Integer.toString(fileList.length));
+
+			Log.v("sendMissedData", fileList.toString());
 
 
-		try {
-			String sendReq = "aDel"+"sendMissedData"+"aDel" + Integer.toString(fileList.length ) + "aDel";
-			outputStream.writeUTF(sendReq + "\n");
-			outputStream.flush();
-			FileInputStream inputStream;
-			InputStreamReader inputStreamReader;
-			BufferedReader bufferedReader;
-			StringBuilder sb;
-			for (int i = 0; i < fileList.length; i++) {
-				Log.v("File input stream", path+"/"+filename);
+			try {
+				String sendReq = "aDel" + "sendMissedData" + "aDel" + Integer.toString(fileList.length) + "aDel";
+				outputStream.writeUTF(sendReq + "\n");
+				outputStream.flush();
+				FileInputStream inputStream;
+				InputStreamReader inputStreamReader;
+				BufferedReader bufferedReader;
+				StringBuilder sb;
+				for (int i = 0; i < fileList.length; i++) {
+					Log.v("File input stream", path_0 + "/" + filename);
 
-				try {
-					filename = fileList[i];
-					inputStream = new FileInputStream(new File(path+"/"+filename));
-					//FileInputStream in = context.openFileInput(path+"/"+filename);
-					/*  Log.e(TAG, "File inputStreamReader.");*/
-					inputStreamReader = new InputStreamReader(inputStream);
-					bufferedReader = new BufferedReader(inputStreamReader);
-					sb = new StringBuilder();
-					line = bufferedReader.readLine();
-					sb.append(line);
-					line = sb.toString();
+					try {
+						filename = fileList[i].getName();
+						inputStream = new FileInputStream(new File(path_0 + "/" + filename));
+						//FileInputStream in = context.openFileInput(path+"/"+filename);
+						/*  Log.e(TAG, "File inputStreamReader.");*/
+						inputStreamReader = new InputStreamReader(inputStream);
+						bufferedReader = new BufferedReader(inputStreamReader);
+						sb = new StringBuilder();
+						line = bufferedReader.readLine();
+						sb.append(line);
+						line = sb.toString();
 
-					outputStream.writeUTF(filename+"aDel"+line + "\n");
-					outputStream.flush();
-					inputStream.close();
-					bufferedReader.close();
-				} catch (Exception e) {
-					Log.e(TAG, "File read failed...");
-					e.printStackTrace();
-				}
+						outputStream.writeUTF(filename + "aDel" + line + "\n");
+						outputStream.flush();
+						inputStream.close();
+						bufferedReader.close();
+					} catch (Exception e) {
+						Log.e(TAG, "File read failed...");
+						e.printStackTrace();
+					}
 
 
-			}
-			for (File tmpf : directory.listFiles()){
-				Log.v("deleting "+tmpf.getName(),"deleting "+tmpf.getName());
-				tmpf.delete();
+				}
+				for (File tmpf : directory_0.listFiles()) {
+					Log.v("deleting " + tmpf.getName(), "deleting " + tmpf.getName());
+					tmpf.delete();
+				}
+			} catch (Exception e) {
+				e.printStackTrace();
 			}
-		}
-		catch (Exception e){
+
+		}finally {
+				lock_0.lock();
+			}
+	}
+		else if(reqNode.equals(myNode.succ.succ.node_id)){
+		lock_1.lock(); try
+			{
+			String filename = "";
+			String line = "";
+
+
+			Log.v("File input stream", reqNode);
+			Log.v("File input stream", path_1);
+
+			Log.v("File input stream", "sendMissedData");
+			File[] fileList = directory_1.listFiles();
+			Log.v("File input stream", Integer.toString(fileList.length));
+			Log.v("File input stream", Integer.toString(fileList.length));
+
+			Log.v("File input stream", Integer.toString(fileList.length));
+
+			Log.v("File input stream", Integer.toString(fileList.length));
+
+			Log.v("sendMissedData", fileList.toString());
+
+
+			try {
+				String sendReq = "aDel" + "sendMissedData" + "aDel" + Integer.toString(fileList.length) + "aDel";
+				outputStream.writeUTF(sendReq + "\n");
+				outputStream.flush();
+				FileInputStream inputStream;
+				InputStreamReader inputStreamReader;
+				BufferedReader bufferedReader;
+				StringBuilder sb;
+				for (int i = 0; i < fileList.length; i++) {
+					Log.v("File input stream", path_1 + "/" + filename);
+
+					try {
+						filename = fileList[i].getName();
+						inputStream = new FileInputStream(new File(path_1 + "/" + filename));
+						//FileInputStream in = context.openFileInput(path+"/"+filename);
+						/*  Log.e(TAG, "File inputStreamReader.");*/
+						inputStreamReader = new InputStreamReader(inputStream);
+						bufferedReader = new BufferedReader(inputStreamReader);
+						sb = new StringBuilder();
+						line = bufferedReader.readLine();
+						sb.append(line);
+						line = sb.toString();
+
+						outputStream.writeUTF(filename + "aDel" + line + "\n");
+						outputStream.flush();
+						inputStream.close();
+						bufferedReader.close();
+					} catch (Exception e) {
+						Log.e(TAG, "File read failed...");
+						e.printStackTrace();
+					}
+
+
+				}
+				for (File tmpf : directory_1.listFiles()) {
+					Log.v("deleting " + tmpf.getName(), "deleting " + tmpf.getName());
+					tmpf.delete();
+				}
+			} catch (Exception e) {
+				e.printStackTrace();
+			}
+
+		}finally {
+			lock_1.unlock();
+			}
+	}
+		else if(reqNode.equals(myNode.pred.node_id)) {
+			try {
+				String filename = "";
+				String line = "";
+
+
+				Log.v("File input stream", reqNode);
+				Log.v("File input stream", path_2);
+
+				Log.v("File input stream", "sendMissedData");
+				File[] fileList = directory_2.listFiles();
+				Log.v("File input stream", Integer.toString(fileList.length));
+				Log.v("File input stream", Integer.toString(fileList.length));
+
+				Log.v("File input stream", Integer.toString(fileList.length));
+
+				Log.v("File input stream", Integer.toString(fileList.length));
+
+				Log.v("sendMissedData", fileList.toString());
 
-		}
+
+				try {
+					String sendReq = "aDel" + "sendMissedData" + "aDel" + Integer.toString(fileList.length) + "aDel";
+					outputStream.writeUTF(sendReq + "\n");
+					outputStream.flush();
+					FileInputStream inputStream;
+					InputStreamReader inputStreamReader;
+					BufferedReader bufferedReader;
+					StringBuilder sb;
+					for (int i = 0; i < fileList.length; i++) {
+						Log.v("File input stream", path_2 + "/" + filename);
+
+						try {
+							filename = fileList[i].getName();
+							inputStream = new FileInputStream(new File(path_2 + "/" + filename));
+							//FileInputStream in = context.openFileInput(path+"/"+filename);
+							/*  Log.e(TAG, "File inputStreamReader.");*/
+							inputStreamReader = new InputStreamReader(inputStream);
+							bufferedReader = new BufferedReader(inputStreamReader);
+							sb = new StringBuilder();
+							line = bufferedReader.readLine();
+							sb.append(line);
+							line = sb.toString();
+
+							outputStream.writeUTF(filename + "aDel" + line + "\n");
+							outputStream.flush();
+							inputStream.close();
+							bufferedReader.close();
+						} catch (Exception e) {
+							Log.e(TAG, "File read failed...");
+							e.printStackTrace();
+						}
+					}
+					for (File tmpf : directory_2.listFiles()) {
+						Log.v("deleting " + tmpf.getName(), "deleting " + tmpf.getName());
+						tmpf.delete();
+					}
+				} catch (Exception e) {
+					e.printStackTrace();
+				}
 
+			} finally {
+			}
+		}
+		return;
 	}
 
 
@@ -504,7 +878,7 @@
 		}
 		responsibleNode = myNode.lookUp(hashedKey);
 		if ((myNode.node_id).equals(responsibleNode.node_id)) {
-			String sendReq ="aDel+insertReplica+aDel"+filename+"aDel"+string+"aDel"+myNode.node_id;
+			String sendReq ="aDel+insertReplica+aDel"+filename+"aDel"+string+"aDel"+myNode.node_id+"aDel"+"0";
 			sendReplica(filename,string,myNode.succ,sendReq);
 			sendReplica(filename,string,myNode.succ.succ,sendReq);
 			Log.v("Created " + filename, "with value " + string );
@@ -515,6 +889,16 @@
 				outputStream.write(string.getBytes());
 				outputStream.flush();
 				outputStream.close();
+				for(int i=0;i<reqQue2.size();i++){
+
+					String[] result1 = reqQue2.poll();
+					outputStream = getContext().openFileOutput(result1[0], Context.MODE_PRIVATE);
+					outputStream.write(result1[1].getBytes());
+					outputStream.flush();
+					outputStream.close();
+
+					Log.v(result1[0],result1[1]);
+				}
 
 				/*if(myNode.node_id.equals("11120")){
 					sendReplica(filename,string,Integer.toString(Integer.parseInt(myNode.node_id) + 4));
@@ -537,6 +921,8 @@
 		}
 		else
 			sendToResponsibleNode(filename,string,responsibleNode);
+
+
 		return uri;
 	}
 
@@ -547,23 +933,45 @@
 			DataInputStream in = new DataInputStream(socket.getInputStream());
 			out1.writeUTF(sendReq+"\n");
 			out1.flush();
-			socket.setSoTimeout(300);
 			String msgReceived = "";
 			msgReceived = in.readUTF();
+			if((!msgReceived.contains("Ack") && sendReq.contains("insertMissedData"))){
+				Log.v("insertMissedData Error",msgReceived);
+				sendReplica(key,value,node.succ,sendReq);
+			}
+
 			Log.v("sent replica",sendReq + node.node_id);
 		}
 		catch (SocketTimeoutException e){
-			insertMissedData(key,value,node.node_id);
-		}
+			if(sendReq.contains("insertMissedData")){
+				Log.v("insertMissedData Error","insertMissedData Error");
+				sendReplica(key,value,node.succ,sendReq);
+			}
+			else{
+				insertMissedData(key,value,node.node_id);
+
+			}		}
 		catch (EOFException ee){
-			insertMissedData(key,value,node.node_id);
+			if(sendReq.contains("insertMissedData")){
+				Log.v("insertMissedData Error","insertMissedData Error");
+				sendReplica(key,value,node.succ,sendReq);
+			}
+			else{
+				insertMissedData(key,value,node.node_id);
+
+			}
 		}
 		catch(Exception ex){
-			insertMissedData(key,value,node.node_id);
-			ex.printStackTrace();
-			Log.e("ClientTask","sendReplica Error");
+			if(sendReq.contains("insertMissedData")){
+				Log.v("insertMissedData Error","insertMissedData Error");
+				sendReplica(key,value,node.succ,sendReq);
+			}
+			else{
+				insertMissedData(key,value,node.node_id);
+
+			}
 		}
-
+return;
 	}
 
 
@@ -587,40 +995,60 @@
 
 		}
 		catch(SocketTimeoutException e){
-			e.printStackTrace();
 			Log.e("ServerTask","sendToResponsibleNode Error " +responsible_node.node_id );
-			String sendReq ="aDel"+"insertReplica"+"aDel"+key+"aDel"+value+"aDel"+responsible_node.node_id;
-			String sendReq1 ="aDel"+"insertMissedData"+"aDel"+key+"aDel"+value+"aDel"+responsible_node.node_id;
-			if(responsible_node.pred.node_id.equals(myNode.node_id))
+			String sendReq ="aDel"+"insertReplica"+"aDel"+key+"aDel"+value+"aDel"+responsible_node.node_id+"aDel"+"0";
+			String sendReq1 ="aDel"+"insertReplica"+"aDel"+key+"aDel"+value+"aDel"+responsible_node.node_id+"aDel"+"1";
+
+			if(responsible_node.succ.node_id.equals(myNode.node_id))
+			{
+				insertReplica(key,value);
+
 				insertMissedData(key,value,responsible_node.node_id);
+			}
+			else
+				sendReplica(key,value,responsible_node.succ,sendReq1);
+			if(responsible_node.succ.succ.node_id.equals(myNode.node_id))
+				insertReplica(key,value);
 			else
-				sendReplica(key,value,responsible_node.pred,sendReq1);
-			sendReplica(key,value,responsible_node.succ,sendReq);
-			sendReplica(key,value,responsible_node.succ.succ,sendReq);
+				sendReplica(key,value,responsible_node.succ.succ,sendReq);
 		}
 		catch(EOFException ex){
-			ex.printStackTrace();
 			Log.e("ServerTask","sendToResponsibleNode Error " +responsible_node.node_id );
-			String sendReq ="aDel"+"insertReplica"+"aDel"+key+"aDel"+value+"aDel"+responsible_node.node_id;
-			String sendReq1 ="aDel"+"insertMissedData"+"aDel"+key+"aDel"+value+"aDel"+responsible_node.node_id;
-			if(responsible_node.pred.node_id.equals(myNode.node_id))
+			String sendReq ="aDel"+"insertReplica"+"aDel"+key+"aDel"+value+"aDel"+responsible_node.node_id+"aDel"+"0";
+			String sendReq1 ="aDel"+"insertReplica"+"aDel"+key+"aDel"+value+"aDel"+responsible_node.node_id+"aDel"+"1";
+
+			if(responsible_node.succ.node_id.equals(myNode.node_id)){
+				insertReplica(key,value);
 				insertMissedData(key,value,responsible_node.node_id);
+			}
+
+			else
+				sendReplica(key,value,responsible_node.succ,sendReq1);
+			if(responsible_node.succ.succ.node_id.equals(myNode.node_id))
+				insertReplica(key,value);
 			else
-				sendReplica(key,value,responsible_node.pred,sendReq1);
-			sendReplica(key,value,responsible_node.succ,sendReq);
-			sendReplica(key,value,responsible_node.succ.succ,sendReq);
+				sendReplica(key,value,responsible_node.succ.succ,sendReq);
 		}
 		catch (Exception e){
-			e.printStackTrace();
 			Log.e("ServerTask","sendToResponsibleNode Error " +responsible_node.node_id );
-			String sendReq ="aDel"+"insertReplica"+"aDel"+key+"aDel"+value+"aDel"+responsible_node.node_id;
-			String sendReq1 ="aDel"+"insertMissedData"+"aDel"+key+"aDel"+value+"aDel"+responsible_node.node_id;
-			if(responsible_node.pred.node_id.equals(myNode.node_id))
+			String sendReq ="aDel"+"insertReplica"+"aDel"+key+"aDel"+value+"aDel"+responsible_node.node_id+"aDel"+"0";
+			String sendReq1 ="aDel"+"insertReplica"+"aDel"+key+"aDel"+value+"aDel"+responsible_node.node_id+"aDel"+"1";
+
+			if(responsible_node.succ.node_id.equals(myNode.node_id)){
+				insertReplica(key,value);
+
 				insertMissedData(key,value,responsible_node.node_id);
+			}
 			else
-				sendReplica(key,value,responsible_node.pred,sendReq1);
-			sendReplica(key,value,responsible_node.succ,sendReq);
-			sendReplica(key,value,responsible_node.succ.succ,sendReq);
+				sendReplica(key,value,responsible_node.succ,sendReq1);
+			if(responsible_node.succ.succ.node_id.equals(myNode.node_id))
+				insertReplica(key,value);
+			else
+				sendReplica(key,value,responsible_node.succ.succ,sendReq);
+			/*if(responsible_node.succ.node_id.equals(myNode.node_id))
+				insertMissedData(key,value,responsible_node.node_id);
+			else
+				sendReplica(key,value,responsible_node.succ,sendReq1);*/
 		}
 	}
 	@Override
@@ -668,6 +1096,7 @@
 		}catch(Exception e){
 			e.printStackTrace();
 		}
+		setDirs();
 		try {
 			Log.v(TAG, "Attempting to create a ServerSocket");
 			ServerSocket serverSocket = new ServerSocket(10000);
@@ -683,15 +1112,65 @@
 		new ClientTask().executeOnExecutor(AsyncTask.SERIAL_EXECUTOR);
 		return true;
 	}
+    void setDirs(){
+		Context context = getContext();
 
+try {
+	missed_files_dir_0 = context.getDir(SimpleDynamoProvider.myNode.succ.node_id, Context.MODE_PRIVATE);
+	path_0 = missed_files_dir_0.getPath();
+	directory_0 = new File(path_0);
+	missed_files_dir_1 = context.getDir(SimpleDynamoProvider.myNode.succ.succ.node_id, Context.MODE_PRIVATE);
+	path_1 = missed_files_dir_1.getPath();
+	directory_1 = new File(path_1);
+	missed_files_dir_2 = context.getDir(SimpleDynamoProvider.myNode.pred.node_id, Context.MODE_PRIVATE);
+	path_2 = missed_files_dir_2.getPath();
+	directory_2 = new File(path_2);
+}catch (Exception e){
+	setDirs();
+}
+    }
+    static File getDir0(){
+        return directory_0;
+    }
+    static File getDir1(){
+        return directory_1;
+    }
+    static String getPath0(){
+        return path_0;
+    }
+    static String getPath1(){
+        return path_1;
+    }
+	static File getDir2(){
+		return directory_2;
+	}
+	static String getPath2(){
+		return path_2;
+	}
 	static BlockingQueue<String[]> reqQue = new LinkedBlockingDeque<String[]>();
 	static BlockingQueue<ArrayList<String[]>> reqQueTotal = new LinkedBlockingDeque<ArrayList<String[]>>();
 
 	@Override
 	synchronized public Cursor query(Uri uri, String[] projection, String selection,
 			String[] selectionArgs, String sortOrder)  {
+
 		// TODO Auto-generated method stub
+		try {
+			for (int i = 0; i < reqQue2.size(); i++) {
+
+				String[] result1 = reqQue2.poll();
+				FileOutputStream outputStream;
 
+				outputStream = getContext().openFileOutput(result1[0], Context.MODE_PRIVATE);
+				outputStream.write(result1[1].getBytes());
+				outputStream.flush();
+				outputStream.close();
+
+				Log.v(result1[0], result1[1]);
+			}
+		}catch (Exception e){
+			e.printStackTrace();
+		}
 		MatrixCursor matrixCursor = new MatrixCursor(new String[]{"key", "value"});
 		String filename = selection;
 		String line = "";
@@ -811,12 +1290,7 @@
 					getResponsibleNode2(responsibleNode.succ.succ,filename);
 					MatrixCursor.RowBuilder builder = matrixCursor.newRow();
 					String result[]  =reqQue.take();
-					while(result[1].equals(filename)){
-						reqQue.put(result);
-						result  =reqQue.take();
-					}
 					Log.v("waiting","waiting completed");
-					Log.v(result[1],result[2]);
 					builder.add("key",result[1] );
 					builder.add("value", result[2]);
 					matrixCursor.setNotificationUri(getContext().getContentResolver(), uri);
@@ -830,15 +1304,11 @@
 			}
 			else{
 				try {
+
 					getResponsibleNode(responsibleNode,filename);
 					MatrixCursor.RowBuilder builder = matrixCursor.newRow();
 					String result[]  =reqQue.take();
-					while(result[1].equals(filename)){
-						reqQue.put(result);
-						result  =reqQue.take();
-					}
 					Log.v("waiting","waiting completed");
-					Log.v(result[1],result[2]);
 					builder.add("key",result[1] );
 					builder.add("value", result[2]);
 					matrixCursor.setNotificationUri(getContext().getContentResolver(), uri);
@@ -918,26 +1388,23 @@
 			Socket socket = new Socket(InetAddress.getByAddress(new byte[]{10, 0, 2, 2}), Integer.parseInt(su.node_id));
 			DataOutputStream out1 = new DataOutputStream(socket.getOutputStream());
 			DataInputStream in = new DataInputStream(socket.getInputStream());
+			//socket.setSoTimeout(300);
 			String sendReq ="aDel+queryRequest+aDel"+filename+"aDel"+myNode.node_id+"aDel";
 			out1.writeUTF(sendReq+"\n");
 			out1.flush();
-			socket.setSoTimeout(200);
-			String msgReceived = in.readUTF();
 			Log.v("send To R Node","sent queryRequest"+myNode.node_id +" "+ su.node_id);
 		}
 		catch (SocketTimeoutException e){
+			getResponsibleNode(su.succ,filename);
 			e.printStackTrace();
 
-			getResponsibleNode(su.succ,filename);
-
 		}
 		catch(Exception ex){
-			ex.printStackTrace();
-
 			getResponsibleNode(su.succ,filename);
+			ex.printStackTrace();
 			Log.e("ClientTask","sendToResponsibleNode Error");
 		}
-return;
+
 	}
 
 	synchronized public void getResponsibleNode2(Node su,String filename){
@@ -951,23 +1418,19 @@
 			String sendReq ="aDel+queryRequest+aDel"+filename+"aDel"+myNode.node_id+"aDel";
 			out1.writeUTF(sendReq+"\n");
 			out1.flush();
-			socket.setSoTimeout(200);
-			String msgReceived = in.readUTF();
 			Log.v("send To R Node","sent queryRequest"+myNode.node_id +" "+ su.node_id);
 		}
 		catch (SocketTimeoutException e){
-			e.printStackTrace();
-
 			getResponsibleNode(su.pred,filename);
+			e.printStackTrace();
 
 		}
 		catch(Exception ex){
-			ex.printStackTrace();
-
 			getResponsibleNode(su.pred,filename);
+			ex.printStackTrace();
 			Log.e("ClientTask","sendToResponsibleNode Error");
 		}
-return;
+
 	}
 
 	public void getResponsibleNode1(String reqNode,Node responsible_node,String filename){
@@ -983,13 +1446,10 @@
 			Log.v("send To R Node","sent insert req");
 		}
 		catch (SocketTimeoutException e){
-			e.printStackTrace();
-			getResponsibleNode1(reqNode,responsible_node.pred,filename);
+			getResponsibleNode1(reqNode,responsible_node.succ,filename);
 		}
 		catch(Exception ex){
 			ex.printStackTrace();
-			getResponsibleNode1(reqNode,responsible_node.pred,filename);
-
 			Log.e("ClientTask","sendToResponsibleNode Error");
 		}
 
@@ -1062,9 +1522,7 @@
 					}
 					if (receivedMessage.contains("queryRequest")) {
 						SimpleDynamoProvider sdh = new SimpleDynamoProvider();
-						DataOutputStream outputStream = new DataOutputStream(serverS.getOutputStream());
-						outputStream.writeUTF("Ack" + "\n");
-						outputStream.flush();
+
 						nodeIds = receivedMessage.split("aDel");
 						fileName = nodeIds[2];
 						String reqNode = nodeIds[3];
@@ -1076,19 +1534,17 @@
 						}
 						responsibleNode = SimpleDynamoProvider.myNode.lookUp(hashedKey);
 						Log.v(hashedKey, fileName);
-
-
-						if ((SimpleDynamoProvider.myNode.node_id).equals(reqNode)) {
+						/*if ((SimpleDynamoProvider.myNode.node_id).equals(reqNode)) {
 							Log.e("ServerTask", "Received queryRequest to self");
-							sdh.respondQuery1(fileName);
-						}
-						else if ((SimpleDynamoProvider.myNode.node_id).equals(responsibleNode.node_id)) {
-							sdh.getResponsibleNode1(reqNode, SimpleDynamoProvider.myNode.succ.succ, fileName);
 
+						} else*/ if ((SimpleDynamoProvider.myNode.node_id).equals(responsibleNode.node_id)) {
+							sdh.respondQuery(reqNode, fileName);
 						} else {
-							sdh.respondQuery(reqNode, fileName);
+							sdh.getResponsibleNode1(reqNode, SimpleDynamoProvider.myNode.succ, fileName);
 						}
-
+						DataOutputStream outputStream = new DataOutputStream(serverS.getOutputStream());
+						outputStream.writeUTF("Ack" + "\n");
+						outputStream.flush();
 						Log.v("ServerTask", "Received queryRequest  ");
 
 					}
@@ -1116,7 +1572,7 @@
 						try {
 							SimpleDynamoProvider.reqQue.put(result);
 						} catch (Exception e) {
-			e.printStackTrace();
+
 						}
 
 						Log.v("ServerTask Res", result[1] + " " + result[2]);
@@ -1136,41 +1592,48 @@
 					}
 					else if (receivedMessage.contains("insertRequest")) {
 						Log.v("ServerTask", "Received insertRequest ");
-						DataOutputStream outputStream = new DataOutputStream(serverS.getOutputStream());
-						outputStream.writeUTF("Ack" + "\n");
-						outputStream.flush();
+
 						nodeIds = msgReceived.split("aDel");
 						String key = nodeIds[2];
 						String value = nodeIds[3];
 						SimpleDynamoProvider sdh = new SimpleDynamoProvider();
 						sdh.insertOtherNode(key, value);
-
-					}
-					else if (receivedMessage.contains("insertReplica")) {
-						Log.v("ServerTask", "Received insertRequest ");
 						DataOutputStream outputStream = new DataOutputStream(serverS.getOutputStream());
 						outputStream.writeUTF("Ack" + "\n");
 						outputStream.flush();
+					}
+					else if (receivedMessage.contains("insertReplica")) {
+						Log.v("ServerTask", "Received insertRequest ");
 						nodeIds = msgReceived.split("aDel");
 						String key = nodeIds[2];
 						String value = nodeIds[3];
 						String host_node_ID = nodeIds[4];
+						String flag = nodeIds[5];
 						SimpleDynamoProvider sdh = new SimpleDynamoProvider();
-						sdh.insertReplica(key, value);
+						sdh.insertReplica1(key, value,host_node_ID,flag);
+						Log.v("flag",flag);
+						SimpleDynamoProvider sdh1 = new SimpleDynamoProvider();
 
-					}
-					if (receivedMessage.contains("insertMissedData")) {
-						Log.v("ServerTask", "Received insertRequest ");
+						if(flag.equals("1"))
+							sdh1.insertMissedData(key,value,host_node_ID);
 						DataOutputStream outputStream = new DataOutputStream(serverS.getOutputStream());
 						outputStream.writeUTF("Ack" + "\n");
 						outputStream.flush();
+					}
+					else if (receivedMessage.contains("insertMissedData")) {
+						Log.v("ServerTask", "Received insertRequest ");
 						nodeIds = msgReceived.split("aDel");
 						String key = nodeIds[2];
 						String value = nodeIds[3];
 						String missed_node_ID = nodeIds[4];
 						SimpleDynamoProvider sdh = new SimpleDynamoProvider();
+						DataOutputStream outputStream = new DataOutputStream(serverS.getOutputStream());
+						outputStream.writeUTF("aDelAckaDelaDelAckaDelaDelAckaDel" + "\n");
+						outputStream.flush();
+
 						sdh.insertMissedData(key, value, missed_node_ID);
-
+						Log.v("insertMissedData", missed_node_ID);
+						Log.v("insertMissedData", SimpleDynamoProvider.myNode.succ.node_id);
 					}
 
 					if (receivedMessage.contains("deleteRequest")) {
@@ -1224,6 +1687,7 @@
 class ClientTask extends AsyncTask<String, Void, Void> {
 boolean flag1 = true;
 boolean flag2 = true;
+	 Queue<String[]> reqQue1 = new LinkedList<String[]>();
 	void sendDataRequest() {
 			try {
 				SimpleDynamoProvider sdh = new SimpleDynamoProvider();
@@ -1253,6 +1717,10 @@
 						arrayList.add(result);
 						sdh.insertReplica(result[0],result[1]);
 						Log.v("ServerTask Res", result[0] + " " + result[1]);
+						if(SimpleDynamoActivity.getAppContext()!=null)
+							sdh.insertReplica(result[0],result[1]);
+						else
+							reqQue1.add(result);
 					}
 				}
 			}  catch (EOFException se1) {
@@ -1299,35 +1767,174 @@
 						receivedMessage = in.readUTF();
 						result = receivedMessage.split("aDel");
 						arrayList.add(result);
+						if(SimpleDynamoActivity.getAppContext()!=null)
+							sdh.insertReplica(result[0],result[1]);
+						else
+							reqQue1.add(result);
+						Log.v("ServerTask Res", result[0] + " " + result[1]);
+					}
+				}
+			} catch (EOFException se2){
+				if(flag1)
+					sendDataRequest();
+				try {
+					Thread.sleep(3000);
+				}catch (Exception e){
+					e.printStackTrace();
+				}
+				if(flag2)
+					sendDataRequest1();
+			} catch (Exception io) {
+				Log.e("Exception Thrown", io.toString());
+			}
+			flag2 = false;
+			return;
+	}
+
+
+	void sendDataRequest2() {
+		try {
+			SimpleDynamoProvider sdh = new SimpleDynamoProvider();
+			Socket socket = new Socket(InetAddress.getByAddress(new byte[]{10, 0, 2, 2}), Integer.parseInt(SimpleDynamoProvider.getMyNode().succ.node_id));
+			OutputStream outToServer;
+			outToServer = socket.getOutputStream();
+			String nodeIds[], newNodeID, newNodeHashId;
+
+
+			DataOutputStream out = new DataOutputStream(outToServer);
+			String sendReq = "missedDataRequest";
+			Log.v("ClientTask", "sending " + "missedDataRequest to "+ Integer.parseInt(SimpleDynamoProvider.getMyNode().succ.node_id));
+			out.writeUTF("aDel" + sendReq + "aDel" + SimpleDynamoProvider.getMyNode().node_id + "aDel" + SimpleDynamoProvider.getMyNode().hashedId + "\n");
+			out.flush();
+			String receivedMessage="";
+			DataInputStream in = new DataInputStream(socket.getInputStream());
+			receivedMessage = in.readUTF();
+			socket.setSoTimeout(300);
+
+			if (receivedMessage.contains("sendMissedData")) {
+				ArrayList<String[]> arrayList = new ArrayList<String[]>();
+				String numLines = receivedMessage.split("aDel")[1];
+				String numLines1 = receivedMessage.split("aDel")[2];
+				Log.v(numLines, numLines1);
+				String result[] = {};
+				for (int i = 0; i < Integer.parseInt(numLines1); i++) {
+					receivedMessage = in.readUTF();
+					result = receivedMessage.split("aDel");
+					arrayList.add(result);
+					if(SimpleDynamoActivity.getAppContext()!=null)
 						sdh.insertReplica(result[0],result[1]);
-						Log.v("ServerTask Res", result[0] + " " + result[1]);
-					}
-				}
-			} catch (EOFException se2){
-				if(flag1)
-					sendDataRequest();
-				try {
-					Thread.sleep(3000);
-				}catch (Exception e){
-					e.printStackTrace();
-				}
-				if(flag2)
-					sendDataRequest1();
-			} catch (Exception io) {
-				Log.e("Exception Thrown", io.toString());
-			}
-			flag2 = false;
-			return;
+					else
+						reqQue1.add(result);
+					Log.v("ServerTask Res", result[0] + " " + result[1]);
+				}
+			}
+		} catch (EOFException se2){
+			if(flag1)
+				sendDataRequest();
+			try {
+				Thread.sleep(3000);
+			}catch (Exception e){
+				e.printStackTrace();
+			}
+			if(flag2)
+				sendDataRequest1();
+		} catch (Exception io) {
+			Log.e("Exception Thrown", io.toString());
+		}
+		flag2 = false;
+		return;
 	}
 
 
+	void sendDataRequest3() {
+		try {
+			SimpleDynamoProvider sdh = new SimpleDynamoProvider();
+			Socket socket = new Socket(InetAddress.getByAddress(new byte[]{10, 0, 2, 2}), Integer.parseInt(SimpleDynamoProvider.getMyNode().succ.succ.node_id));
+			OutputStream outToServer;
+			outToServer = socket.getOutputStream();
+			String nodeIds[], newNodeID, newNodeHashId;
+
+
+			DataOutputStream out = new DataOutputStream(outToServer);
+			String sendReq = "missedDataRequest";
+			Log.v("ClientTask", "sending " + "missedDataRequest to "+ Integer.parseInt(SimpleDynamoProvider.getMyNode().succ.succ.node_id));
+			out.writeUTF("aDel" + sendReq + "aDel" + SimpleDynamoProvider.getMyNode().node_id + "aDel" + SimpleDynamoProvider.getMyNode().hashedId + "\n");
+			out.flush();
+			String receivedMessage="";
+			DataInputStream in = new DataInputStream(socket.getInputStream());
+			receivedMessage = in.readUTF();
+			socket.setSoTimeout(300);
+
+			if (receivedMessage.contains("sendMissedData")) {
+				ArrayList<String[]> arrayList = new ArrayList<String[]>();
+				String numLines = receivedMessage.split("aDel")[1];
+				String numLines1 = receivedMessage.split("aDel")[2];
+				Log.v(numLines, numLines1);
+				String result[] = {};
+				for (int i = 0; i < Integer.parseInt(numLines1); i++) {
+					receivedMessage = in.readUTF();
+					result = receivedMessage.split("aDel");
+					arrayList.add(result);
+					if(SimpleDynamoActivity.getAppContext()!=null)
+						sdh.insertReplica(result[0],result[1]);
+					else
+						reqQue1.add(result);
+					Log.v("ServerTask Res", result[0] + " " + result[1]);
+				}
+			}
+		} catch (EOFException se2){
+			if(flag1)
+				sendDataRequest();
+			try {
+				Thread.sleep(3000);
+			}catch (Exception e){
+				e.printStackTrace();
+			}
+			if(flag2)
+				sendDataRequest1();
+		} catch (Exception io) {
+			Log.e("Exception Thrown", io.toString());
+		}
+		flag2 = false;
+		return;
+	}
 
 
 	@Override
 	protected Void doInBackground(String... msgs) {
-			Log.v("ClientTask", "ClientTask invoked1");
+		SimpleDynamoProvider sdh = new SimpleDynamoProvider();
+
+		Log.v("ClientTask", "ClientTask invoked1");
 			sendDataRequest();
 			sendDataRequest1();
+			sendDataRequest2();
+			sendDataRequest3();
+			Context context = SimpleDynamoActivity.getAppContext();
+		Log.v("Client Fetch","reQue1");
+			for(int i=0;i<reqQue1.size();i++){
+				while(context!=null){
+					context = SimpleDynamoActivity.getAppContext();
+				}
+				String[] result = reqQue1.poll();
+
+
+				Log.v(result[0],result[1]);
+				sdh.insertReplica(result[0],result[1]);
+			}
 	return null;
+	}
+}
+
+class ClientTask1 extends AsyncTask<String, Void, Void> {
+	protected Void doInBackground(String... msgs) {
+			SimpleDynamoProvider sdh = new SimpleDynamoProvider();
+
+			Log.v("ClientTask", "ClientTask invoked1");
+
+			Context context = SimpleDynamoActivity.getAppContext();
+			Log.v("Client Fetch","reQue1");
+			
+			return null;
 	}
-}
+
+}
\ No newline at end of file
